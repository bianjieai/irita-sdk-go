syntax = "proto3";
package cosmos_sdk.std.v1;

import "third_party/proto/cosmos-proto/cosmos.proto";
import "third_party/proto/gogoproto/gogo.proto";
import "types/types.proto";
import "modules/bank/types.proto";

option go_package = "github.com/bianjieai/irita-sdk-go/std";

// Transaction defines the application-level transaction that can be signed and
// processed by the state-machine. It contains a base of common fields and
// repeated set of Message types.
message Transaction {
  option (gogoproto.goproto_getters) = false;

  StdTxBase        base = 1 [(gogoproto.jsontag) = "", (gogoproto.embed) = true, (gogoproto.nullable) = false];
  repeated Message msgs = 2 [(gogoproto.nullable) = false];
}

// Message defines the set of valid concrete message types that can be used to
// construct a transaction.
message Message {
  option (cosmos_proto.interface_type) = "github.com/bianjieai/irita-sdk-go/types.Msg";

  // sum defines the set of all allowed valid messages defined in modules.
  oneof sum {
      cschain.modules.bank.MsgSend                                msg_send                          = 1;
//    cosmos_sdk.x.bank.v1.MsgMultiSend                           msg_multi_send                    = 2;
//    cosmos_sdk.x.crisis.v1.MsgVerifyInvariant                   msg_verify_invariant              = 3;
//    cosmos_sdk.x.distribution.v1.MsgSetWithdrawAddress          msg_set_withdraw_address          = 4;
//    cosmos_sdk.x.distribution.v1.MsgWithdrawDelegatorReward     msg_withdraw_delegator_reward     = 5;
//    cosmos_sdk.x.distribution.v1.MsgWithdrawValidatorCommission msg_withdraw_validator_commission = 6;
//    cosmos_sdk.x.distribution.v1.MsgFundCommunityPool           msg_fund_community_pool           = 7;
//    MsgSubmitProposal                                           msg_submit_proposal               = 9;
//    cosmos_sdk.x.gov.v1.MsgVote                                 msg_vote                          = 10;
//    cosmos_sdk.x.gov.v1.MsgDeposit                              msg_deposit                       = 11;
//    cosmos_sdk.x.slashing.v1.MsgUnjail                          msg_unjail                        = 12;
//    cosmos_sdk.x.staking.v1.MsgCreateValidator                  msg_create_validator              = 13;
//    cosmos_sdk.x.staking.v1.MsgEditValidator                    msg_edit_validator                = 14;
//    cosmos_sdk.x.staking.v1.MsgDelegate                         msg_delegate                      = 15;
//    cosmos_sdk.x.staking.v1.MsgBeginRedelegate                  msg_begin_redelegate              = 16;
//    cosmos_sdk.x.staking.v1.MsgUndelegate                       msg_undelegate                    = 17;
  }
}

// SignDoc defines a standard application-level signing document to compose
// signatures for a Transaction.
message SignDoc {
  StdSignDocBase   base = 1 [(gogoproto.jsontag) = "", (gogoproto.embed) = true, (gogoproto.nullable) = false];
  repeated Message msgs = 2 [(gogoproto.nullable) = false];
}

// StdFee includes the amount of coins paid in fees and the maximum
// gas to be used by the transaction. The ratio yields an effective "gasprice",
// which must be above some miminum to be accepted into the mempool.
message StdFee {
  option (gogoproto.goproto_getters) = false;
  option (gogoproto.equal)           = true;

  repeated cschain.Coin amount = 1
      [(gogoproto.nullable) = false, (gogoproto.castrepeated) = "github.com/bianjieai/irita-sdk-go/types.Coins"];
  uint64 gas = 2;
}

// StdSignature defines a signature structure that contains the signature of a
// transaction and an optional public key.
message StdSignature {
  option (gogoproto.goproto_getters) = false;

  bytes pub_key   = 1 [(gogoproto.jsontag) = "public_key,omitempty", (gogoproto.moretags) = "yaml:\"public_key\""];
  bytes signature = 2;
}

// StdTxBase defines a transaction base which application-level concrete transaction
// types can extend.
message StdTxBase {
  StdFee                fee        = 1 [(gogoproto.nullable) = false];
  repeated StdSignature signatures = 2 [(gogoproto.nullable) = false];
  string                memo       = 3;
}

// StdSignDocBase defines the base structure for which applications can extend
// to define the concrete structure that signers sign over.
message StdSignDocBase {
  string chain_id       = 1 [(gogoproto.customname) = "ChainID", (gogoproto.moretags) = "yaml:\"chain_id\""];
  uint64 account_number = 2 [(gogoproto.moretags) = "yaml:\"account_number\""];
  uint64 sequence       = 3;
  string memo           = 4;
  StdFee fee            = 5 [(gogoproto.nullable) = false];
}
