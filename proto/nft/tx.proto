syntax = "proto3";
package irismod.nft;

import "gogoproto/gogo.proto";

option go_package = "github.com/bianjieai/irita-sdk-go/modules/nft";
option(gogoproto.goproto_getters_all) = false;

// MsgIssueDenom defines an SDK message for creating a new denom.
message MsgIssueDenom {
    option(gogoproto.equal) = true;

    string id = 1;
    string name = 2;
    string schema = 3;
    string sender = 4;
}

// MsgTransferNFT defines an SDK message for transferring an NFT to recipient.
message MsgTransferNFT {
    option(gogoproto.equal) = true;

    string id = 1;
    string denom_id = 2 [(gogoproto.moretags) = "yaml:\"denom_id\""];
    string name = 3;
    string uri = 4 [(gogoproto.customname) = "URI"];
    string data = 5;
    string sender = 6;
    string recipient = 7;
}

// MsgEditNFT defines an SDK message for editing a nft.
message MsgEditNFT {
    option(gogoproto.equal) = true;

    string id = 1;
    string denom_id = 2 [(gogoproto.moretags) = "yaml:\"denom_id\""];
    string name = 3;
    string uri = 4 [(gogoproto.customname) = "URI"];
    string data = 5;
    string sender = 6;
}

// MsgMintNFT defines an SDK message for creating a new NFT.
message MsgMintNFT {
    option(gogoproto.equal) = true;

    string id = 1;
    string denom_id = 2 [(gogoproto.moretags) = "yaml:\"denom_id\""];
    string name = 3;
    string uri = 4 [(gogoproto.customname) = "URI"];
    string data = 5;
    string sender = 6;
    string recipient = 7;
}

// MsgBurnNFT defines an SDK message for burning a NFT.
message MsgBurnNFT {
    option(gogoproto.equal) = true;

    string id = 1;
    string denom_id = 2 [(gogoproto.moretags) = "yaml:\"denom_id\""];
    string sender = 3;
}

