// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: modules/identity/types.proto

package identity

import (
	bytes "bytes"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	gitlab_bianjie_ai_cschain_cschain_sdk_go_types "github.com/bianjieai/irita-sdk-go/types"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// PubKeyAlgorithm defines the algorithm names for the public key
type PubKeyAlgorithm int32

const (
	// UnknownPubKeyAlgorithm defines an unknown algorithm name
	UnknownPubKeyAlgorithm PubKeyAlgorithm = 0
	// RSA defines a RSA algorithm name
	RSA PubKeyAlgorithm = 1
	// DSA defines a DSA algorithm name.
	DSA PubKeyAlgorithm = 2
	// ECDSA defines an ECDSA algorithm name.
	ECDSA PubKeyAlgorithm = 3
	// ED25519 defines an ED25519 algorithm name.
	ED25519 PubKeyAlgorithm = 4
	// SM2 defines an SM2 algorithm name.
	SM2 PubKeyAlgorithm = 5
)

var PubKeyAlgorithm_name = map[int32]string{
	0: "UnknownPubKeyAlgorithm",
	1: "RSA",
	2: "DSA",
	3: "ECDSA",
	4: "ED25519",
	5: "SM2",
}

var PubKeyAlgorithm_value = map[string]int32{
	"UnknownPubKeyAlgorithm": 0,
	"RSA":                    1,
	"DSA":                    2,
	"ECDSA":                  3,
	"ED25519":                4,
	"SM2":                    5,
}

func (PubKeyAlgorithm) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_edb387931accce3f, []int{0}
}

// MsgCreateIdentity defines a message to create an identity
type MsgCreateIdentity struct {
	ID          gitlab_bianjie_ai_cschain_cschain_sdk_go_types.HexBytes   `protobuf:"bytes,1,opt,name=id,proto3,casttype=github.com/bianjieai/irita-sdk-go/types.HexBytes" json:"id,omitempty"`
	PubKey      *PubKeyInfo                                               `protobuf:"bytes,2,opt,name=pub_key,json=pubKey,proto3" json:"pubkey" yaml:"pubkey"`
	Certificate string                                                    `protobuf:"bytes,3,opt,name=certificate,proto3" json:"certificate,omitempty"`
	Credentials string                                                    `protobuf:"bytes,4,opt,name=credentials,proto3" json:"credentials,omitempty"`
	Owner       gitlab_bianjie_ai_cschain_cschain_sdk_go_types.AccAddress `protobuf:"bytes,5,opt,name=owner,proto3,casttype=github.com/bianjieai/irita-sdk-go/types.AccAddress" json:"owner,omitempty"`
}

func (m *MsgCreateIdentity) Reset()         { *m = MsgCreateIdentity{} }
func (m *MsgCreateIdentity) String() string { return proto.CompactTextString(m) }
func (*MsgCreateIdentity) ProtoMessage()    {}
func (*MsgCreateIdentity) Descriptor() ([]byte, []int) {
	return fileDescriptor_edb387931accce3f, []int{0}
}
func (m *MsgCreateIdentity) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateIdentity) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateIdentity.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateIdentity) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateIdentity.Merge(m, src)
}
func (m *MsgCreateIdentity) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateIdentity) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateIdentity.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateIdentity proto.InternalMessageInfo

// MsgUpdateIdentity defines a message to update an identity
type MsgUpdateIdentity struct {
	ID          gitlab_bianjie_ai_cschain_cschain_sdk_go_types.HexBytes   `protobuf:"bytes,1,opt,name=id,proto3,casttype=github.com/bianjieai/irita-sdk-go/types.HexBytes" json:"id,omitempty"`
	PubKey      *PubKeyInfo                                               `protobuf:"bytes,2,opt,name=pub_key,json=pubKey,proto3" json:"pubkey" yaml:"pubkey"`
	Certificate string                                                    `protobuf:"bytes,3,opt,name=certificate,proto3" json:"certificate,omitempty"`
	Credentials string                                                    `protobuf:"bytes,4,opt,name=credentials,proto3" json:"credentials,omitempty"`
	Owner       gitlab_bianjie_ai_cschain_cschain_sdk_go_types.AccAddress `protobuf:"bytes,5,opt,name=owner,proto3,casttype=github.com/bianjieai/irita-sdk-go/types.AccAddress" json:"owner,omitempty"`
}

func (m *MsgUpdateIdentity) Reset()         { *m = MsgUpdateIdentity{} }
func (m *MsgUpdateIdentity) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateIdentity) ProtoMessage()    {}
func (*MsgUpdateIdentity) Descriptor() ([]byte, []int) {
	return fileDescriptor_edb387931accce3f, []int{1}
}
func (m *MsgUpdateIdentity) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateIdentity) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateIdentity.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateIdentity) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateIdentity.Merge(m, src)
}
func (m *MsgUpdateIdentity) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateIdentity) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateIdentity.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateIdentity proto.InternalMessageInfo

// Identity defines a struct for an identity
type Identity struct {
	ID           gitlab_bianjie_ai_cschain_cschain_sdk_go_types.HexBytes   `protobuf:"bytes,1,opt,name=id,proto3,casttype=github.com/bianjieai/irita-sdk-go/types.HexBytes" json:"id,omitempty"`
	PubKeys      []PubKeyInfo                                              `protobuf:"bytes,2,rep,name=pub_keys,json=pubKeys,proto3" json:"pubkeys" yaml:"pubkeys"`
	Certificates []string                                                  `protobuf:"bytes,3,rep,name=certificates,proto3" json:"certificates,omitempty"`
	Credentials  string                                                    `protobuf:"bytes,4,opt,name=credentials,proto3" json:"credentials,omitempty"`
	Owner        gitlab_bianjie_ai_cschain_cschain_sdk_go_types.AccAddress `protobuf:"bytes,5,opt,name=owner,proto3,casttype=github.com/bianjieai/irita-sdk-go/types.AccAddress" json:"owner,omitempty"`
}

func (m *Identity) Reset()         { *m = Identity{} }
func (m *Identity) String() string { return proto.CompactTextString(m) }
func (*Identity) ProtoMessage()    {}
func (*Identity) Descriptor() ([]byte, []int) {
	return fileDescriptor_edb387931accce3f, []int{2}
}
func (m *Identity) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Identity) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Identity.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Identity) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Identity.Merge(m, src)
}
func (m *Identity) XXX_Size() int {
	return m.Size()
}
func (m *Identity) XXX_DiscardUnknown() {
	xxx_messageInfo_Identity.DiscardUnknown(m)
}

var xxx_messageInfo_Identity proto.InternalMessageInfo

// PubKey represents a public key along with the corresponding algorithm
type PubKeyInfo struct {
	PubKey    gitlab_bianjie_ai_cschain_cschain_sdk_go_types.HexBytes `protobuf:"bytes,1,opt,name=pub_key,json=pubKey,proto3,casttype=github.com/bianjieai/irita-sdk-go/types.HexBytes" json:"pubkey" yaml:"pubkey"`
	Algorithm PubKeyAlgorithm                                         `protobuf:"varint,2,opt,name=algorithm,proto3,enum=cschain.modules.identity.PubKeyAlgorithm" json:"algorithm,omitempty"`
}

func (m *PubKeyInfo) Reset()         { *m = PubKeyInfo{} }
func (m *PubKeyInfo) String() string { return proto.CompactTextString(m) }
func (*PubKeyInfo) ProtoMessage()    {}
func (*PubKeyInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_edb387931accce3f, []int{3}
}
func (m *PubKeyInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PubKeyInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PubKeyInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PubKeyInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PubKeyInfo.Merge(m, src)
}
func (m *PubKeyInfo) XXX_Size() int {
	return m.Size()
}
func (m *PubKeyInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_PubKeyInfo.DiscardUnknown(m)
}

var xxx_messageInfo_PubKeyInfo proto.InternalMessageInfo

func init() {
	proto.RegisterEnum("cschain.modules.identity.PubKeyAlgorithm", PubKeyAlgorithm_name, PubKeyAlgorithm_value)
	proto.RegisterType((*MsgCreateIdentity)(nil), "cschain.modules.identity.MsgCreateIdentity")
	proto.RegisterType((*MsgUpdateIdentity)(nil), "cschain.modules.identity.MsgUpdateIdentity")
	proto.RegisterType((*Identity)(nil), "cschain.modules.identity.Identity")
	proto.RegisterType((*PubKeyInfo)(nil), "cschain.modules.identity.PubKeyInfo")
}

func init() { proto.RegisterFile("modules/identity/types.proto", fileDescriptor_edb387931accce3f) }

var fileDescriptor_edb387931accce3f = []byte{
	// 606 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x95, 0x4d, 0x6b, 0xd4, 0x40,
	0x18, 0xc7, 0xf3, 0xd2, 0xed, 0x76, 0xa7, 0xb5, 0xc6, 0x20, 0x12, 0xa2, 0x24, 0x71, 0x11, 0x59,
	0x85, 0x66, 0x71, 0xa5, 0x4a, 0x0b, 0x1e, 0xb2, 0xdd, 0xa2, 0xa5, 0x14, 0x34, 0xa1, 0x0a, 0xbd,
	0x94, 0xbc, 0x4c, 0xd3, 0x71, 0x77, 0x93, 0x90, 0x99, 0xa5, 0xe6, 0x1b, 0xc8, 0x9e, 0xfc, 0x02,
	0x0b, 0x82, 0x3d, 0x78, 0xf4, 0x0b, 0x78, 0xdf, 0x83, 0x87, 0x1e, 0x3d, 0x05, 0xbb, 0x7b, 0x91,
	0x1e, 0x7b, 0xec, 0x49, 0x36, 0x2f, 0xec, 0xba, 0x50, 0xad, 0x48, 0xf1, 0xe2, 0x29, 0x33, 0xff,
	0xf9, 0x3f, 0x4f, 0xe6, 0xf9, 0x3d, 0x0f, 0x0c, 0xb8, 0xd5, 0xf6, 0x9d, 0x4e, 0x0b, 0xe2, 0x2a,
	0x72, 0xa0, 0x47, 0x10, 0x89, 0xaa, 0x24, 0x0a, 0x20, 0x56, 0x83, 0xd0, 0x27, 0x3e, 0x2f, 0xd8,
	0xd8, 0xde, 0x37, 0x91, 0xa7, 0x66, 0x2e, 0x35, 0x77, 0x89, 0x77, 0xc9, 0x3e, 0x0a, 0x9d, 0xdd,
	0xc0, 0x0c, 0x49, 0x54, 0x4d, 0xcc, 0x55, 0xd7, 0x77, 0xfd, 0xf1, 0x2a, 0xcd, 0x50, 0x3e, 0x66,
	0xc0, 0xb5, 0x2d, 0xec, 0xae, 0x85, 0xd0, 0x24, 0x70, 0x23, 0x8b, 0xe6, 0x5f, 0x00, 0x06, 0x39,
	0x02, 0xad, 0xd0, 0x95, 0x85, 0xba, 0x36, 0x88, 0x65, 0x66, 0xa3, 0x71, 0x16, 0xcb, 0x8f, 0x5d,
	0x44, 0x5a, 0xa6, 0xa5, 0x5a, 0xc8, 0xf4, 0x5e, 0x23, 0xa8, 0x9a, 0xa8, 0x9a, 0xfd, 0x3f, 0xff,
	0x2e, 0x61, 0xa7, 0xb9, 0xe4, 0xfa, 0xd9, 0x1d, 0x9f, 0xc1, 0x37, 0xf5, 0x88, 0x40, 0xac, 0x33,
	0xc8, 0xe1, 0x77, 0x40, 0x31, 0xe8, 0x58, 0xbb, 0x4d, 0x18, 0x09, 0x8c, 0x42, 0x57, 0xe6, 0x6b,
	0x77, 0xd4, 0xf3, 0x2e, 0xaf, 0x3e, 0xef, 0x58, 0x9b, 0x30, 0xda, 0xf0, 0xf6, 0xfc, 0xfa, 0xcd,
	0x93, 0x58, 0x9e, 0x0d, 0x3a, 0x56, 0x13, 0x46, 0xa7, 0xb1, 0x7c, 0x25, 0x32, 0xdb, 0xad, 0xd5,
	0x72, 0xba, 0x2f, 0xeb, 0xa3, 0x83, 0x4d, 0x18, 0xf1, 0x0a, 0x98, 0xb7, 0x61, 0x48, 0xd0, 0x1e,
	0xb2, 0x4d, 0x02, 0x05, 0x56, 0xa1, 0x2b, 0x25, 0x7d, 0x52, 0x4a, 0x1c, 0x21, 0x4c, 0xf2, 0x9b,
	0x2d, 0x2c, 0xcc, 0x64, 0x8e, 0xb1, 0xc4, 0x1b, 0xa0, 0xe0, 0x1f, 0x78, 0x30, 0x14, 0x0a, 0x49,
	0xd5, 0x4f, 0xce, 0x62, 0x79, 0xe5, 0x0f, 0xeb, 0xd5, 0x6c, 0x5b, 0x73, 0x9c, 0x10, 0x62, 0xac,
	0xa7, 0xb9, 0x56, 0x67, 0xbe, 0xbf, 0x97, 0xe9, 0x9c, 0xf1, 0x76, 0xe0, 0xfc, 0x67, 0x7c, 0x59,
	0x8c, 0x07, 0x0c, 0x98, 0xbb, 0x4c, 0xb4, 0x16, 0x98, 0xcb, 0xd0, 0x62, 0x81, 0x51, 0xd8, 0x0b,
	0xb3, 0xbd, 0xdd, 0x8f, 0x65, 0xea, 0x24, 0x96, 0x8b, 0x29, 0x4f, 0x7c, 0x1a, 0xcb, 0x8b, 0x93,
	0x80, 0x71, 0x59, 0x2f, 0xa6, 0x84, 0x31, 0x5f, 0x06, 0x0b, 0x13, 0x3c, 0xb1, 0xc0, 0x2a, 0x6c,
	0xa5, 0xa4, 0xff, 0xa4, 0xfd, 0x5b, 0xc8, 0x5f, 0x68, 0x00, 0xc6, 0xb5, 0xf1, 0xfe, 0x78, 0xdc,
	0x52, 0xd6, 0x2f, 0x7f, 0x31, 0x48, 0x7f, 0xd3, 0x80, 0x7c, 0x06, 0x9f, 0x82, 0x92, 0xd9, 0x72,
	0xfd, 0x10, 0x91, 0xfd, 0x76, 0x32, 0xe1, 0x8b, 0xb5, 0x7b, 0xbf, 0xeb, 0x82, 0x96, 0x07, 0xe8,
	0xe3, 0xd8, 0xb4, 0x9c, 0xfb, 0x9f, 0x69, 0x70, 0x75, 0xca, 0xc4, 0x3f, 0x02, 0x37, 0xb6, 0xbd,
	0xa6, 0xe7, 0x1f, 0x78, 0x53, 0x27, 0x1c, 0x25, 0x8a, 0xdd, 0x9e, 0x72, 0xce, 0x29, 0xcf, 0x01,
	0x56, 0x37, 0x34, 0x8e, 0x16, 0x8b, 0xdd, 0x9e, 0x32, 0x5a, 0x8e, 0x94, 0x86, 0xa1, 0x71, 0x4c,
	0xaa, 0x34, 0x0c, 0x8d, 0xbf, 0x0e, 0x0a, 0xeb, 0x6b, 0x23, 0x8d, 0x15, 0x4b, 0xdd, 0x9e, 0x92,
	0x6e, 0x78, 0x01, 0x14, 0xd7, 0x1b, 0xb5, 0xe5, 0xe5, 0x07, 0x2b, 0xdc, 0x8c, 0x38, 0xdf, 0xed,
	0x29, 0xf9, 0x76, 0x94, 0xc1, 0xd8, 0xaa, 0x71, 0x85, 0x34, 0x83, 0xb1, 0x55, 0x13, 0x17, 0xde,
	0x7e, 0x90, 0xa8, 0x8f, 0x87, 0x12, 0xf5, 0xe9, 0x50, 0xa2, 0xea, 0xaf, 0xfa, 0xc7, 0x12, 0xd5,
	0x1f, 0x48, 0xf4, 0xd1, 0x40, 0xa2, 0xbf, 0x0d, 0x24, 0xfa, 0xdd, 0x50, 0xa2, 0x8e, 0x86, 0x12,
	0xf5, 0x75, 0x28, 0x51, 0x3b, 0x17, 0x6f, 0xfa, 0xf4, 0x13, 0x63, 0xcd, 0x26, 0x6f, 0xc3, 0xc3,
	0x1f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x86, 0x5e, 0xe6, 0x55, 0x7d, 0x06, 0x00, 0x00,
}

func (this *MsgCreateIdentity) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MsgCreateIdentity)
	if !ok {
		that2, ok := that.(MsgCreateIdentity)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.ID, that1.ID) {
		return false
	}
	if !this.PubKey.Equal(that1.PubKey) {
		return false
	}
	if this.Certificate != that1.Certificate {
		return false
	}
	if this.Credentials != that1.Credentials {
		return false
	}
	if !bytes.Equal(this.Owner, that1.Owner) {
		return false
	}
	return true
}
func (this *MsgUpdateIdentity) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MsgUpdateIdentity)
	if !ok {
		that2, ok := that.(MsgUpdateIdentity)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.ID, that1.ID) {
		return false
	}
	if !this.PubKey.Equal(that1.PubKey) {
		return false
	}
	if this.Certificate != that1.Certificate {
		return false
	}
	if this.Credentials != that1.Credentials {
		return false
	}
	if !bytes.Equal(this.Owner, that1.Owner) {
		return false
	}
	return true
}
func (this *Identity) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Identity)
	if !ok {
		that2, ok := that.(Identity)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.ID, that1.ID) {
		return false
	}
	if len(this.PubKeys) != len(that1.PubKeys) {
		return false
	}
	for i := range this.PubKeys {
		if !this.PubKeys[i].Equal(&that1.PubKeys[i]) {
			return false
		}
	}
	if len(this.Certificates) != len(that1.Certificates) {
		return false
	}
	for i := range this.Certificates {
		if this.Certificates[i] != that1.Certificates[i] {
			return false
		}
	}
	if this.Credentials != that1.Credentials {
		return false
	}
	if !bytes.Equal(this.Owner, that1.Owner) {
		return false
	}
	return true
}
func (this *PubKeyInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PubKeyInfo)
	if !ok {
		that2, ok := that.(PubKeyInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.PubKey, that1.PubKey) {
		return false
	}
	if this.Algorithm != that1.Algorithm {
		return false
	}
	return true
}
func (m *MsgCreateIdentity) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateIdentity) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateIdentity) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Credentials) > 0 {
		i -= len(m.Credentials)
		copy(dAtA[i:], m.Credentials)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Credentials)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Certificate) > 0 {
		i -= len(m.Certificate)
		copy(dAtA[i:], m.Certificate)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Certificate)))
		i--
		dAtA[i] = 0x1a
	}
	if m.PubKey != nil {
		{
			size, err := m.PubKey.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.ID) > 0 {
		i -= len(m.ID)
		copy(dAtA[i:], m.ID)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.ID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateIdentity) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateIdentity) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateIdentity) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Credentials) > 0 {
		i -= len(m.Credentials)
		copy(dAtA[i:], m.Credentials)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Credentials)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Certificate) > 0 {
		i -= len(m.Certificate)
		copy(dAtA[i:], m.Certificate)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Certificate)))
		i--
		dAtA[i] = 0x1a
	}
	if m.PubKey != nil {
		{
			size, err := m.PubKey.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.ID) > 0 {
		i -= len(m.ID)
		copy(dAtA[i:], m.ID)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.ID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Identity) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Identity) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Identity) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Credentials) > 0 {
		i -= len(m.Credentials)
		copy(dAtA[i:], m.Credentials)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Credentials)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Certificates) > 0 {
		for iNdEx := len(m.Certificates) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Certificates[iNdEx])
			copy(dAtA[i:], m.Certificates[iNdEx])
			i = encodeVarintTypes(dAtA, i, uint64(len(m.Certificates[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.PubKeys) > 0 {
		for iNdEx := len(m.PubKeys) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PubKeys[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.ID) > 0 {
		i -= len(m.ID)
		copy(dAtA[i:], m.ID)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.ID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PubKeyInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PubKeyInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PubKeyInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Algorithm != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Algorithm))
		i--
		dAtA[i] = 0x10
	}
	if len(m.PubKey) > 0 {
		i -= len(m.PubKey)
		copy(dAtA[i:], m.PubKey)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.PubKey)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintTypes(dAtA []byte, offset int, v uint64) int {
	offset -= sovTypes(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgCreateIdentity) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ID)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.PubKey != nil {
		l = m.PubKey.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.Certificate)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.Credentials)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *MsgUpdateIdentity) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ID)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.PubKey != nil {
		l = m.PubKey.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.Certificate)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.Credentials)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *Identity) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ID)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if len(m.PubKeys) > 0 {
		for _, e := range m.PubKeys {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if len(m.Certificates) > 0 {
		for _, s := range m.Certificates {
			l = len(s)
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	l = len(m.Credentials)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *PubKeyInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PubKey)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.Algorithm != 0 {
		n += 1 + sovTypes(uint64(m.Algorithm))
	}
	return n
}

func sovTypes(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTypes(x uint64) (n int) {
	return sovTypes(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgCreateIdentity) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateIdentity: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateIdentity: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ID = append(m.ID[:0], dAtA[iNdEx:postIndex]...)
			if m.ID == nil {
				m.ID = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PubKey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PubKey == nil {
				m.PubKey = &PubKeyInfo{}
			}
			if err := m.PubKey.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Certificate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Certificate = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Credentials", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Credentials = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = append(m.Owner[:0], dAtA[iNdEx:postIndex]...)
			if m.Owner == nil {
				m.Owner = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateIdentity) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateIdentity: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateIdentity: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ID = append(m.ID[:0], dAtA[iNdEx:postIndex]...)
			if m.ID == nil {
				m.ID = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PubKey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PubKey == nil {
				m.PubKey = &PubKeyInfo{}
			}
			if err := m.PubKey.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Certificate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Certificate = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Credentials", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Credentials = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = append(m.Owner[:0], dAtA[iNdEx:postIndex]...)
			if m.Owner == nil {
				m.Owner = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Identity) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Identity: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Identity: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ID = append(m.ID[:0], dAtA[iNdEx:postIndex]...)
			if m.ID == nil {
				m.ID = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PubKeys", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PubKeys = append(m.PubKeys, PubKeyInfo{})
			if err := m.PubKeys[len(m.PubKeys)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Certificates", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Certificates = append(m.Certificates, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Credentials", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Credentials = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = append(m.Owner[:0], dAtA[iNdEx:postIndex]...)
			if m.Owner == nil {
				m.Owner = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PubKeyInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PubKeyInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PubKeyInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PubKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PubKey = append(m.PubKey[:0], dAtA[iNdEx:postIndex]...)
			if m.PubKey == nil {
				m.PubKey = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Algorithm", wireType)
			}
			m.Algorithm = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Algorithm |= PubKeyAlgorithm(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTypes(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTypes
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTypes
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTypes
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTypes        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTypes          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTypes = fmt.Errorf("proto: unexpected end of group")
)
