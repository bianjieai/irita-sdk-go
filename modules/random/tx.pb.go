// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: random/tx.proto

package random

import (
	fmt "fmt"
	github_com_bianjieai_irita_sdk_go_types "github.com/bianjieai/irita-sdk-go/types"
	types "github.com/bianjieai/irita-sdk-go/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// MsgRequestRandom defines an sdk.Msg type that supports requesting a random number
type MsgRequestRandom struct {
	BlockInterval uint64                                        `protobuf:"varint,1,opt,name=block_interval,json=blockInterval,proto3" json:"block_interval,omitempty" yaml:"block_interval"`
	Consumer      string                                        `protobuf:"bytes,2,opt,name=consumer,proto3" json:"consumer,omitempty"`
	Oracle        bool                                          `protobuf:"varint,3,opt,name=oracle,proto3" json:"oracle,omitempty"`
	ServiceFeeCap github_com_bianjieai_irita_sdk_go_types.Coins `protobuf:"bytes,4,rep,name=service_fee_cap,json=serviceFeeCap,proto3,castrepeated=github.com/bianjieai/irita-sdk-go/types.Coins" json:"service_fee_cap" yaml:"service_fee_cap"`
}

func (m *MsgRequestRandom) Reset()         { *m = MsgRequestRandom{} }
func (m *MsgRequestRandom) String() string { return proto.CompactTextString(m) }
func (*MsgRequestRandom) ProtoMessage()    {}
func (*MsgRequestRandom) Descriptor() ([]byte, []int) {
	return fileDescriptor_8734007206ce5490, []int{0}
}
func (m *MsgRequestRandom) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRequestRandom) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRequestRandom.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRequestRandom) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRequestRandom.Merge(m, src)
}
func (m *MsgRequestRandom) XXX_Size() int {
	return m.Size()
}
func (m *MsgRequestRandom) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRequestRandom.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRequestRandom proto.InternalMessageInfo

func (m *MsgRequestRandom) GetBlockInterval() uint64 {
	if m != nil {
		return m.BlockInterval
	}
	return 0
}

func (m *MsgRequestRandom) GetConsumer() string {
	if m != nil {
		return m.Consumer
	}
	return ""
}

func (m *MsgRequestRandom) GetOracle() bool {
	if m != nil {
		return m.Oracle
	}
	return false
}

func (m *MsgRequestRandom) GetServiceFeeCap() github_com_bianjieai_irita_sdk_go_types.Coins {
	if m != nil {
		return m.ServiceFeeCap
	}
	return nil
}

func init() {
	proto.RegisterType((*MsgRequestRandom)(nil), "irismod.random.MsgRequestRandom")
}

func init() { proto.RegisterFile("random/tx.proto", fileDescriptor_8734007206ce5490) }

var fileDescriptor_8734007206ce5490 = []byte{
	// 353 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x91, 0xb1, 0x8e, 0xd3, 0x30,
	0x18, 0xc7, 0xe3, 0xb6, 0xaa, 0x4a, 0x50, 0x5b, 0x14, 0x41, 0x95, 0x76, 0x48, 0xa2, 0x4c, 0x59,
	0x1a, 0x53, 0xd8, 0x98, 0x50, 0x2b, 0x21, 0x81, 0x84, 0x90, 0x32, 0xb2, 0x54, 0x8e, 0xf3, 0x11,
	0x4c, 0x93, 0x7c, 0xc1, 0x76, 0x2a, 0xfa, 0x16, 0x88, 0x9d, 0x17, 0xe0, 0x49, 0x3a, 0x76, 0x64,
	0xea, 0x9d, 0xda, 0x37, 0xe8, 0x13, 0x9c, 0x9a, 0x44, 0x27, 0xdd, 0x2d, 0xb7, 0xf9, 0xef, 0x9f,
	0xfd, 0x93, 0xff, 0xfe, 0xcc, 0xb1, 0x64, 0x45, 0x82, 0x39, 0xd5, 0xbf, 0xc2, 0x52, 0xa2, 0x46,
	0x6b, 0x24, 0xa4, 0x50, 0x39, 0x26, 0x61, 0x03, 0x66, 0x2f, 0x53, 0x4c, 0xb1, 0x46, 0xf4, 0xba,
	0x6a, 0x4e, 0xcd, 0x1c, 0x8e, 0x2a, 0x47, 0x45, 0x63, 0xa6, 0x80, 0x6e, 0x17, 0x31, 0x68, 0xb6,
	0xa0, 0x1c, 0x45, 0xd1, 0x70, 0xff, 0x6f, 0xc7, 0x7c, 0xf1, 0x59, 0xa5, 0x11, 0xfc, 0xac, 0x40,
	0xe9, 0xa8, 0x56, 0x59, 0xef, 0xcd, 0x51, 0x9c, 0x21, 0xdf, 0xac, 0x45, 0xa1, 0x41, 0x6e, 0x59,
	0x66, 0x13, 0x8f, 0x04, 0xbd, 0xe5, 0xf4, 0x72, 0x74, 0x5f, 0xed, 0x58, 0x9e, 0xbd, 0xf3, 0x1f,
	0x72, 0x3f, 0x1a, 0xd6, 0x1b, 0x1f, 0xdb, 0x6c, 0xcd, 0xcc, 0x01, 0xc7, 0x42, 0x55, 0x39, 0x48,
	0xbb, 0xe3, 0x91, 0xe0, 0x59, 0x74, 0x9f, 0xad, 0x89, 0xd9, 0x47, 0xc9, 0x78, 0x06, 0x76, 0xd7,
	0x23, 0xc1, 0x20, 0x6a, 0x93, 0xf5, 0x87, 0x98, 0x63, 0x05, 0x72, 0x2b, 0x38, 0xac, 0xbf, 0x01,
	0xac, 0x39, 0x2b, 0xed, 0x9e, 0xd7, 0x0d, 0x9e, 0xbf, 0x99, 0x86, 0x4d, 0x8b, 0xf0, 0xda, 0x22,
	0x6c, 0x5b, 0x84, 0x2b, 0x14, 0xc5, 0xf2, 0xcb, 0xfe, 0xe8, 0x1a, 0x97, 0xa3, 0x3b, 0x69, 0x9e,
	0xf5, 0xe8, 0xbe, 0xff, 0xef, 0xc6, 0x9d, 0xa7, 0x42, 0x7f, 0xaf, 0xe2, 0x90, 0x63, 0x4e, 0x63,
	0xc1, 0x8a, 0x1f, 0x02, 0x98, 0xa0, 0x42, 0x0a, 0xcd, 0xe6, 0x2a, 0xd9, 0xcc, 0x53, 0xa4, 0x7a,
	0x57, 0x82, 0xaa, 0x7d, 0x2a, 0x1a, 0xb6, 0x8a, 0x0f, 0x00, 0x2b, 0x56, 0x2e, 0x3f, 0xed, 0x4f,
	0x0e, 0x39, 0x9c, 0x1c, 0x72, 0x7b, 0x72, 0xc8, 0xef, 0xb3, 0x63, 0x1c, 0xce, 0x8e, 0xf1, 0xff,
	0xec, 0x18, 0x5f, 0x5f, 0x3f, 0xed, 0xcd, 0x31, 0xa9, 0x32, 0x50, 0xb4, 0x99, 0x50, 0xdc, 0xaf,
	0xbf, 0xfc, 0xed, 0x5d, 0x00, 0x00, 0x00, 0xff, 0xff, 0x11, 0x5d, 0x8b, 0xbe, 0xcb, 0x01, 0x00,
	0x00,
}

func (m *MsgRequestRandom) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRequestRandom) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRequestRandom) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ServiceFeeCap) > 0 {
		for iNdEx := len(m.ServiceFeeCap) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ServiceFeeCap[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if m.Oracle {
		i--
		if m.Oracle {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if len(m.Consumer) > 0 {
		i -= len(m.Consumer)
		copy(dAtA[i:], m.Consumer)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Consumer)))
		i--
		dAtA[i] = 0x12
	}
	if m.BlockInterval != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.BlockInterval))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgRequestRandom) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BlockInterval != 0 {
		n += 1 + sovTx(uint64(m.BlockInterval))
	}
	l = len(m.Consumer)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Oracle {
		n += 2
	}
	if len(m.ServiceFeeCap) > 0 {
		for _, e := range m.ServiceFeeCap {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgRequestRandom) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRequestRandom: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRequestRandom: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockInterval", wireType)
			}
			m.BlockInterval = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockInterval |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Consumer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Consumer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Oracle", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Oracle = bool(v != 0)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServiceFeeCap", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServiceFeeCap = append(m.ServiceFeeCap, types.Coin{})
			if err := m.ServiceFeeCap[len(m.ServiceFeeCap)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
