syntax = "proto3";
package irita.modules.validator;

import "third_party/proto/gogoproto/gogo.proto";
import "third_party/proto/tendermint/abci/types/types.proto";

option go_package = "github.com/bianjieai/irita-sdk-go/modules/validator";
option (gogoproto.goproto_getters_all) = false;

// MsgCreateValidator defines an SDK message for creating a new validator.
message MsgCreateValidator {
  option (gogoproto.equal) = true;

  string name = 1;
  string certificate = 2;
  int64 power = 3;
  string description = 4;
  bytes operator = 5 [(gogoproto.casttype) = "github.com/bianjieai/irita-sdk-go/types.AccAddress", (gogoproto.moretags) = "yaml:\"operator\""];
}

// MsgUpdateValidator defines an SDK message for updating an existing validator.
message MsgUpdateValidator {
  option (gogoproto.equal) = true;

  bytes id = 1 [(gogoproto.moretags) = "yaml:\"id\"", (gogoproto.customname) = "ID", (gogoproto.casttype) = "github.com/bianjieai/irita-sdk-go/types.HexBytes"];
  string name = 2;
  string certificate = 3;
  int64 power = 4;
  string description = 5;
  bytes operator = 6 [(gogoproto.casttype) = "github.com/bianjieai/irita-sdk-go/types.AccAddress"];
}

// MsgRemoveValidator defines an SDK message for removing an existing validator.
message MsgRemoveValidator {
  option (gogoproto.equal) = true;

  bytes id = 1 [(gogoproto.moretags) = "yaml:\"id\"", (gogoproto.customname) = "ID", (gogoproto.casttype) = "github.com/bianjieai/irita-sdk-go/types.HexBytes"];
  bytes operator = 2 [(gogoproto.casttype) = "github.com/bianjieai/irita-sdk-go/types.AccAddress"];
}

message MsgUnjailValidator {
  bytes id = 1 [(gogoproto.moretags) = "yaml:\"id\"", (gogoproto.customname) = "ID", (gogoproto.casttype) = "github.com/tendermint/tendermint/libs/bytes.HexBytes"];
  bytes operator = 2 [(gogoproto.casttype) = "github.com/bianjieai/irita-sdk-go/types.AccAddress"];
}

// Request defines a standard for validator. The validator will participate the
// blockchain consensus, power determines the probability of proposing a new block.
message Validator {
  option (gogoproto.equal) = true;

  bytes id = 1 [(gogoproto.moretags) = "yaml:\"id\"", (gogoproto.customname) = "ID", (gogoproto.casttype) = "github.com/bianjieai/irita-sdk-go/types.HexBytes"];
  string name = 2;
  string pubkey = 3;
  string certificate = 4;
  int64 power = 5;
  string description = 6;
  bool jailed = 7;
  bytes operator = 8 [(gogoproto.casttype) = "github.com/bianjieai/irita-sdk-go/types.AccAddress"];
}

// HistoricalInfo contains the historical information that gets stored at
// each height.
message HistoricalInfo {
  option (gogoproto.equal) = true;

  tendermint.abci.types.Header header = 1 [(gogoproto.nullable) = false];
  repeated Validator           valset = 2 [(gogoproto.nullable) = false];
}

// Params defines the parameters for the staking module.
message Params {
  option (gogoproto.equal)            = true;

  uint32 historical_entries = 1 [(gogoproto.moretags) = "yaml:\"historical_entries\""];
}

